language: java
matrix:
  include:
    - os: linux
      language: android
      jdk: oraclejdk8
      android:
        components:
          - tools
          - build-tools-25.0.2
          - android-24
          - android-25
          - platform-tools-25
            # - extra-android-support
            # - extra-android-m2repository
            # - extra-google-m2repository
          - sys-img-armeabi-v7a-android-21
        licenses:
          - '.+'
    - os: osx
      env: ANDROID_HOME=/usr/local/opt/android-sdk
      osx_image: xcode8
addons:
    apt:
        packages:
          - python
          - python-dev
          - python3
          - python3-dev

sudo: required

before_install: rm -rf /home/travis/.nvm

install:
  - git clone https://github.com/jkozera/libwally-core.git -b swig-js
  - ./libwally-core/tools/travis_install.sh
  # Brew on macOS has up to date SWIG already:
  - bash -c '[ "$TRAVIS_OS_NAME" = "osx" ] || (wget http://prdownloads.sourceforge.net/swig/swig-3.0.12.tar.gz && tar -zxf swig-3.0.12.tar.gz && cd swig-3.0.12 && ./configure && make && sudo make install)'
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        cd libwally-core && ./tools/autogen.sh && ./configure && cd .. &&
        brew update > /dev/null &&
        brew install socat nvm &&
        nvm install 6 &&
        nvm use --delete-prefix 6 &&
        npm i -g cordova &&
        cd wallyplugin &&
        python ../libwally-core/src/swig_js/makewrappers/wrap.py &&
        cd .. &&
        npm i browserify base64-js tape &&
        ./node_modules/.bin/browserify -r ./wallyplugin/wally.js:../wally -r ./libwally-core/src/swig_js/test/test_hash.js:./test_hash www/js/index.js --im > www/js/index_built.js &&
        cordova prepare ios &&
        NODE_PATH=`pwd`/platforms/ios/cordova/node_modules node patch_pbxproj_with_wally.js > pbxproj.new &&
        cp -r libwally-core/src/* platforms/ios/HelloCordova &&
        cp -r libwally-core/include platforms/ios/HelloCordova &&
        cp -r libwally-core/src/secp256k1/include/* platforms/ios/HelloCordova/include/ &&
        mv pbxproj.new platforms/ios/HelloCordova.xcodeproj/project.pbxproj &&
        git clone https://github.com/novnc/websockify.git;
      elif [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        echo no | android create avd --force -n test -t android-21 --abi default/armeabi-v7a &&
        curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - &&
        sudo apt-get install -y python-software-properties &&
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y &&
        sudo apt-get update &&
        sudo apt-get install -y nodejs gcc-5 g++-5 netcat-traditional &&
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 80 --slave /usr/bin/g++ g++ /usr/bin/g++-5 &&
        sudo update-alternatives --set gcc /usr/bin/gcc-5 &&
        sudo npm i -g cordova &&
        curl -O http://dl.google.com/android/repository/android-ndk-r13b-linux-x86_64.zip &&
        unzip -qq ./android-ndk-r13b-linux-x86_64.zip &&
        export ANDROID_NDK=`pwd`/android-ndk-r13b &&
        ./prepare_libwally_clang.sh armeabi-v7a &&
        cp libwally-core/src/swig_js/test/test_hash.js www/js &&
        cd wallyplugin &&
        mkdir -p jniLibs/arm64-v8a && touch jniLibs/arm64-v8a/libwallycore.so &&
        mkdir -p jniLibs/armeabi && touch jniLibs/armeabi/libwallycore.so &&
        mkdir -p jniLibs/mips && touch jniLibs/mips/libwallycore.so &&
        mkdir -p jniLibs/mips64 && touch jniLibs/mips64/libwallycore.so &&
        mkdir -p jniLibs/x86 && touch jniLibs/x86/libwallycore.so &&
        mkdir -p jniLibs/x86_64 && touch jniLibs/x86_64/libwallycore.so &&
        python ../libwally-core/src/swig_js/makewrappers/wrap.py &&
        cd .. &&
        sudo npm i -g browserify &&
        npm i base64-js tape &&
        browserify -r ./wallyplugin/wally.js:../wally -r ./libwally-core/src/swig_js/test/test_hash.js:./test_hash www/js/index.js --im > www/js/index_built.js &&
        cp libwally-core/src/swig_java/src/com/blockstream/libwally/Wally.java wallyplugin &&
        cordova prepare android &&
        git clone https://github.com/novnc/websockify.git;
      fi

script:
  - python websockify/run 39741 localhost:39742 &
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        touch output && (
           ( socat -u TCP-LISTEN:39742,reuseaddr OPEN:output ) &
           ( tail -f output | while read LOGLINE; do [[ "${LOGLINE}" == "DONE" ]] && (pkill socat; pkill tail); done ) &
        );
        cordova run ios;
        (tail -f ~/Library/Logs/CoreSimulator/*/system.log &) ;
      elif [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        cordova build android &&
        (emulator -avd test -no-audio -no-window &) &&
        android-wait-for-emulator &&
        (adb shell input keyevent 82 &) &&
        touch output && (
            nc.traditional -lp 39742 | (while read LOGLINE; do echo $LOGLINE >> output; [[ "${LOGLINE}" == "DONE" ]] && (pkill nc.traditional; pkill tail; pkill adb); done) &
        ) &&
        (cordova run android &);
        (adb logcat &);
      fi &&
      tail -f output;
      [[ $(grep ^fail output | wc -l | sed 's. *..') == 0 ]];
